// Code generated by SalGen. DO NOT EDIT.
package bookstore

import (
	"context"
	"database/sql"
	"github.com/go-gad/sal"
	"github.com/pkg/errors"
)

type SalStore struct {
	Store
	handler  sal.QueryHandler
	parent   sal.QueryHandler
	ctrl     *sal.Controller
	txOpened bool
}

func NewStore(h sal.QueryHandler, options ...sal.ClientOption) *SalStore {
	s := &SalStore{
		handler:  h,
		ctrl:     sal.NewController(options...),
		txOpened: false,
	}

	return s
}

func (s *SalStore) BeginTx(ctx context.Context, opts *sql.TxOptions) (Store, error) {
	dbConn, ok := s.handler.(sal.TransactionBegin)
	if !ok {
		return nil, errors.New("handler doesn't satisfy the interface TransactionBegin")
	}
	var (
		err error
		tx  *sql.Tx
	)

	ctx = context.WithValue(ctx, sal.ContextKeyTxOpened, s.txOpened)
	ctx = context.WithValue(ctx, sal.ContextKeyOperationType, "Begin")
	ctx = context.WithValue(ctx, sal.ContextKeyMethodName, "BeginTx")

	for _, fn := range s.ctrl.BeforeQuery {
		var fnz sal.FinalizerFunc
		ctx, fnz = fn(ctx, "BEGIN", nil)
		if fnz != nil {
			defer func() { fnz(ctx, err) }()
		}
	}

	tx, err = dbConn.BeginTx(ctx, opts)
	if err != nil {
		err = errors.Wrap(err, "failed to start tx")
		return nil, err
	}

	newClient := &SalStore{
		handler:  tx,
		parent:   s.handler,
		ctrl:     s.ctrl,
		txOpened: true,
	}

	return newClient, nil
}

func (s *SalStore) Tx() sal.Transaction {
	if tx, ok := s.handler.(sal.SqlTx); ok {
		return sal.NewWrappedTx(tx, s.ctrl)
	}
	return nil
}

func (s *SalStore) CreateAuthor(ctx context.Context, req CreateAuthorReq) (CreateAuthorResp, error) {
	var (
		err      error
		rawQuery = req.Query()
		reqMap   = make(sal.RowMap)
	)
	reqMap.AppendTo("Name", &req.BaseAuthor.Name)
	reqMap.AppendTo("Desc", &req.BaseAuthor.Desc)

	ctx = context.WithValue(ctx, sal.ContextKeyTxOpened, s.txOpened)
	ctx = context.WithValue(ctx, sal.ContextKeyOperationType, "QueryRow")
	ctx = context.WithValue(ctx, sal.ContextKeyMethodName, "CreateAuthor")

	pgQuery, args := sal.ProcessQueryAndArgs(rawQuery, reqMap)

	stmt, err := s.ctrl.PrepareStmt(ctx, s.parent, s.handler, pgQuery)
	if err != nil {
		return CreateAuthorResp{}, errors.WithStack(err)
	}

	for _, fn := range s.ctrl.BeforeQuery {
		var fnz sal.FinalizerFunc
		ctx, fnz = fn(ctx, rawQuery, req)
		if fnz != nil {
			defer func() { fnz(ctx, err) }()
		}
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return CreateAuthorResp{}, errors.Wrap(err, "failed to execute Query")
	}
	defer rows.Close()

	cols, err := rows.Columns()
	if err != nil {
		return CreateAuthorResp{}, errors.Wrap(err, "failed to fetch columns")
	}

	if !rows.Next() {
		if err = rows.Err(); err != nil {
			return CreateAuthorResp{}, errors.Wrap(err, "rows error")
		}
		return CreateAuthorResp{}, sql.ErrNoRows
	}

	var resp CreateAuthorResp
	var respMap = make(sal.RowMap)
	respMap.AppendTo("ID", &resp.ID)
	respMap.AppendTo("CreatedAt", &resp.CreatedAt)

	dest := sal.GetDests(cols, respMap)

	if err = rows.Scan(dest...); err != nil {
		return CreateAuthorResp{}, errors.Wrap(err, "failed to scan row")
	}

	if err = rows.Err(); err != nil {
		return CreateAuthorResp{}, errors.Wrap(err, "something failed during iteration")
	}

	return resp, nil
}

func (s *SalStore) CreateAuthorPtr(ctx context.Context, req CreateAuthorReq) (*CreateAuthorResp, error) {
	var (
		err      error
		rawQuery = req.Query()
		reqMap   = make(sal.RowMap)
	)
	reqMap.AppendTo("Name", &req.BaseAuthor.Name)
	reqMap.AppendTo("Desc", &req.BaseAuthor.Desc)

	ctx = context.WithValue(ctx, sal.ContextKeyTxOpened, s.txOpened)
	ctx = context.WithValue(ctx, sal.ContextKeyOperationType, "QueryRow")
	ctx = context.WithValue(ctx, sal.ContextKeyMethodName, "CreateAuthorPtr")

	pgQuery, args := sal.ProcessQueryAndArgs(rawQuery, reqMap)

	stmt, err := s.ctrl.PrepareStmt(ctx, s.parent, s.handler, pgQuery)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	for _, fn := range s.ctrl.BeforeQuery {
		var fnz sal.FinalizerFunc
		ctx, fnz = fn(ctx, rawQuery, req)
		if fnz != nil {
			defer func() { fnz(ctx, err) }()
		}
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, errors.Wrap(err, "failed to execute Query")
	}
	defer rows.Close()

	cols, err := rows.Columns()
	if err != nil {
		return nil, errors.Wrap(err, "failed to fetch columns")
	}

	if !rows.Next() {
		if err = rows.Err(); err != nil {
			return nil, errors.Wrap(err, "rows error")
		}
		return nil, sql.ErrNoRows
	}

	var resp CreateAuthorResp
	var respMap = make(sal.RowMap)
	respMap.AppendTo("ID", &resp.ID)
	respMap.AppendTo("CreatedAt", &resp.CreatedAt)

	dest := sal.GetDests(cols, respMap)

	if err = rows.Scan(dest...); err != nil {
		return nil, errors.Wrap(err, "failed to scan row")
	}

	if err = rows.Err(); err != nil {
		return nil, errors.Wrap(err, "something failed during iteration")
	}

	return &resp, nil
}

func (s *SalStore) GetAuthors(ctx context.Context, req GetAuthorsReq) ([]*GetAuthorsResp, error) {
	var (
		err      error
		rawQuery = req.Query()
		reqMap   = make(sal.RowMap)
	)
	reqMap.AppendTo("id", &req.ID)
	reqMap.AppendTo("tags", &req.Tags.Tags)

	req.ProcessRow(reqMap)

	ctx = context.WithValue(ctx, sal.ContextKeyTxOpened, s.txOpened)
	ctx = context.WithValue(ctx, sal.ContextKeyOperationType, "Query")
	ctx = context.WithValue(ctx, sal.ContextKeyMethodName, "GetAuthors")

	pgQuery, args := sal.ProcessQueryAndArgs(rawQuery, reqMap)

	stmt, err := s.ctrl.PrepareStmt(ctx, s.parent, s.handler, pgQuery)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	for _, fn := range s.ctrl.BeforeQuery {
		var fnz sal.FinalizerFunc
		ctx, fnz = fn(ctx, rawQuery, req)
		if fnz != nil {
			defer func() { fnz(ctx, err) }()
		}
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, errors.Wrap(err, "failed to execute Query")
	}
	defer rows.Close()

	cols, err := rows.Columns()
	if err != nil {
		return nil, errors.Wrap(err, "failed to fetch columns")
	}

	var list = make([]*GetAuthorsResp, 0)

	for rows.Next() {
		var resp GetAuthorsResp
		var respMap = make(sal.RowMap)
		respMap.AppendTo("id", &resp.ID)
		respMap.AppendTo("created_at", &resp.CreatedAt)
		respMap.AppendTo("name", &resp.Name)
		respMap.AppendTo("desc", &resp.Desc)
		respMap.AppendTo("tags", &resp.Tags.Tags)

		resp.ProcessRow(respMap)

		dest := sal.GetDests(cols, respMap)

		if err = rows.Scan(dest...); err != nil {
			return nil, errors.Wrap(err, "failed to scan row")
		}

		list = append(list, &resp)
	}

	if err = rows.Err(); err != nil {
		return nil, errors.Wrap(err, "something failed during iteration")
	}

	return list, nil
}

func (s *SalStore) SameName(ctx context.Context, req SameNameReq) (*SameNameResp, error) {
	var (
		err      error
		rawQuery = req.Query()
		reqMap   = make(sal.RowMap)
	)

	ctx = context.WithValue(ctx, sal.ContextKeyTxOpened, s.txOpened)
	ctx = context.WithValue(ctx, sal.ContextKeyOperationType, "QueryRow")
	ctx = context.WithValue(ctx, sal.ContextKeyMethodName, "SameName")

	pgQuery, args := sal.ProcessQueryAndArgs(rawQuery, reqMap)

	stmt, err := s.ctrl.PrepareStmt(ctx, s.parent, s.handler, pgQuery)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	for _, fn := range s.ctrl.BeforeQuery {
		var fnz sal.FinalizerFunc
		ctx, fnz = fn(ctx, rawQuery, req)
		if fnz != nil {
			defer func() { fnz(ctx, err) }()
		}
	}

	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return nil, errors.Wrap(err, "failed to execute Query")
	}
	defer rows.Close()

	cols, err := rows.Columns()
	if err != nil {
		return nil, errors.Wrap(err, "failed to fetch columns")
	}

	if !rows.Next() {
		if err = rows.Err(); err != nil {
			return nil, errors.Wrap(err, "rows error")
		}
		return nil, sql.ErrNoRows
	}

	var resp SameNameResp
	var respMap = make(sal.RowMap)
	respMap.AppendTo("Bar", &resp.Bar)
	respMap.AppendTo("Bar", &resp.Foo.Bar)

	dest := sal.GetDests(cols, respMap)

	if err = rows.Scan(dest...); err != nil {
		return nil, errors.Wrap(err, "failed to scan row")
	}

	if err = rows.Err(); err != nil {
		return nil, errors.Wrap(err, "something failed during iteration")
	}

	return &resp, nil
}

func (s *SalStore) UpdateAuthor(ctx context.Context, req *UpdateAuthorReq) error {
	var (
		err      error
		rawQuery = req.Query()
		reqMap   = make(sal.RowMap)
	)
	reqMap.AppendTo("ID", &req.ID)
	reqMap.AppendTo("Name", &req.BaseAuthor.Name)
	reqMap.AppendTo("Desc", &req.BaseAuthor.Desc)

	ctx = context.WithValue(ctx, sal.ContextKeyTxOpened, s.txOpened)
	ctx = context.WithValue(ctx, sal.ContextKeyOperationType, "Exec")
	ctx = context.WithValue(ctx, sal.ContextKeyMethodName, "UpdateAuthor")

	pgQuery, args := sal.ProcessQueryAndArgs(rawQuery, reqMap)

	stmt, err := s.ctrl.PrepareStmt(ctx, s.parent, s.handler, pgQuery)
	if err != nil {
		return errors.WithStack(err)
	}

	for _, fn := range s.ctrl.BeforeQuery {
		var fnz sal.FinalizerFunc
		ctx, fnz = fn(ctx, rawQuery, req)
		if fnz != nil {
			defer func() { fnz(ctx, err) }()
		}
	}

	_, err = stmt.ExecContext(ctx, args...)
	if err != nil {
		return errors.Wrap(err, "failed to execute Exec")
	}

	return nil
}

func (s *SalStore) UpdateAuthorResult(ctx context.Context, req *UpdateAuthorReq) (sql.Result, error) {
	var (
		err      error
		rawQuery = req.Query()
		reqMap   = make(sal.RowMap)
	)
	reqMap.AppendTo("ID", &req.ID)
	reqMap.AppendTo("Name", &req.BaseAuthor.Name)
	reqMap.AppendTo("Desc", &req.BaseAuthor.Desc)

	ctx = context.WithValue(ctx, sal.ContextKeyTxOpened, s.txOpened)
	ctx = context.WithValue(ctx, sal.ContextKeyOperationType, "Exec")
	ctx = context.WithValue(ctx, sal.ContextKeyMethodName, "UpdateAuthorResult")

	pgQuery, args := sal.ProcessQueryAndArgs(rawQuery, reqMap)

	stmt, err := s.ctrl.PrepareStmt(ctx, s.parent, s.handler, pgQuery)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	for _, fn := range s.ctrl.BeforeQuery {
		var fnz sal.FinalizerFunc
		ctx, fnz = fn(ctx, rawQuery, req)
		if fnz != nil {
			defer func() { fnz(ctx, err) }()
		}
	}

	res, err := stmt.ExecContext(ctx, args...)
	if err != nil {
		return nil, errors.Wrap(err, "failed to execute Exec")
	}

	return res, nil
}

// compile time checks
var _ Store = &SalStore{}
